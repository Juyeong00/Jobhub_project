<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
					"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="resume_mapper">


	<!-- 이력서id res1, res2, res3 ... -->
	<select id="selectNextResumeId" resultType="String">
		SELECT 'res' ||
		TO_CHAR(resume_id_seq.NEXTVAL) AS next_resume_id FROM dual;
	</select>

	<!-- 이력서 저장 -->
	<insert id="saveResume" parameterType="Resume">
		INSERT INTO resume_info
		(resume_id, user_id, jobs_id, career_id,
		academic_id, certificate_id,
		support_path, military_serviceMatters,
		veterans_targetStatus,
		disorderStatus, submissionStatus, revisionDate)
		VALUES (
		'res' ||
		TO_CHAR(resume_id_seq.NEXTVAL),
		#{userId}, #{jobsId}, #{careerId},
		#{academicId},
		#{certificateId}, #{supportPath},
		#{military_serviceMatters},
		#{veterans_targetStatus},
		#{disorderStatus}, #{submissionStatus},
		#{revisionDate}
		)
	</insert>


	<!-- 이력서ID로 검색 -->
	<select id="findResumeByResumeId" resultType="Resume"
		parameterType="int">
		SELECT * FROM resume_info
		WHERE resume_id = #{resumeId}
	</select>

	<!-- 이력서 검색 -->
	<select id="findResumeList" resultType="Resume">
		<![CDATA[
    SELECT
      js.jobs_name AS jobs_name,
      jp.title AS title,
      u.name AS name,
      EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(u.birth, 'RR/MM/DD')) +
      CASE WHEN TO_DATE(u.birth, 'RR/MM/DD') <= TRUNC(SYSDATE, 'YEAR') THEN
      0 ELSE -1 END AS age,
      e.SORTATION AS education,
      CASE WHEN c.car_id IS NULL THEN '신입'
      ELSE '경력' END AS career,
      r.revision_date AS revision_date,
      r.submission_status AS submission_status
    FROM resume_info r
      JOIN job_customer u ON r.user_id = u.user_id
      JOIN job_posting jp ON r.posting_id = jp.posting_id
      LEFT JOIN career c ON r.career_id = c.career_id
      JOIN education e ON r.academic_id = e.academic_id
      JOIN certificate cer ON r.certificate_id = cer.certificate_id
      JOIN jobs js ON jp.jobs_id = js.jobs_id
    WHERE submission_status = '제출'
  ]]>
	</select>

	<!-- 이력서 목록 가져오기 -->
	<select id="findResumesByUserId" resultType="Resume"
		parameterType="String">
		SELECT *
		FROM resume_info
		WHERE user_id = #{userId}
	</select>


	<!-- 이력서 수정 -->
	<update id="modifyResume" parameterType="Resume">
		UPDATE resume_info
		<!-- 제출여부 -->
		SET submission_status = #{submissionStatus},
		revision_date =
		#{revisionDate}
		WHERE
		resume_id = #{resumeId}
	</update>


	<!-- 직무아이디로 찾기 -->
	<select id="findResumesByCareerId" resultType="Resume"
		parameterType="String">
		SELECT *
		FROM resume_info
		WHERE careerId = #{careerId}
	</select>


	<!-- 이력서 관리 검색조건 -->
	<select id="findResumeListBySearchCondition" resultType="Resume"
		parameterType="ResumeSearchCondition">
				<![CDATA[
		SELECT
            js.jobs_name AS jobs_name,
            jp.title AS title,
            u.name AS name,
            EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(u.birth, 'RR/MM/DD')) +
            CASE WHEN TO_DATE(u.birth, 'RR/MM/DD') <= TRUNC(SYSDATE, 'YEAR') THEN
            0 ELSE -1 END AS age,
            e.SORTATION AS education,
            CASE WHEN c.car_id IS NULL THEN '신입'
            ELSE '경력' END AS career,
            r.revision_date AS revision_date,
            r.submission_status AS submission_status
        FROM resume_info r
            JOIN job_customer u ON r.user_id = u.user_id
            JOIN job_posting jp ON r.posting_id = jp.posting_id
            LEFT JOIN career c ON r.career_id = c.career_id
            JOIN education e ON r.academic_id = e.academic_id
            JOIN certificate cer ON r.certificate_id = cer.certificate_id
            JOIN jobs js ON jp.jobs_id = js.jobs_id
        WHERE 1=1
          ]]>
		<!-- 검색어 sfl -->
		<!-- 1) 채용공고 (job_posting테이블의 title) 2) 아이디 (resume_info테이블의 user_id) 3) 
			이름 (job_customer테이블의 name) 4) 휴대전화번호 (user테이블의 phone) 5) 이메일 (user테이블의 email) -->


		<if test="searchKeyword != null and !searchKeyword.isEmpty()">
			AND (
			jp.title LIKE '%' || #{searchKeyword} || '%'
			OR
			u.user_id = #{searchKeyword}
			OR u.name LIKE '%' || #{searchKeyword} ||
			'%'
			OR u.phone = #{searchKeyword}
			OR u.email LIKE '%' ||
			#{searchKeyword} || '%'
			)
		</if>
	</select>



	<!-- 이력서 관리 검색조건 <select id="findResumeListBySearchCondition" resultType="Resume" 
		parameterType="ResumeSearchCondition"> SELECT * FROM resume_info r JOIN job_customer 
		u ON r.user_id = u.user_id JOIN job_posting jp ON r.posting_id = jp.posting_id 
		JOIN career c ON r.career_id = c.career_id JOIN education e ON r.academic_id 
		= e.academic_id JOIN certificate cer ON r.certificate_id = cer.certificate_id 
		WHERE 1=1 -->

	<!-- 검색어 sfl <if test="title != null and title != ''"> AND jp.title LIKE 
		'%' || #{searchKeyword} || '%' </if> <if test="userId != null and userId 
		!= ''"> AND u.user_id = #{searchKeyword} </if> <if test="name != null and 
		name != ''"> AND u.name LIKE '%' || #{searchKeyword} || '%' </if> <if test="phone 
		!= null and phone != ''"> AND u.phone LIKE '%' || #{searchKeyword} || '%' 
		</if> <if test="email != null and email != ''"> AND u.email LIKE '%' || #{searchKeyword} 
		|| '%' </if> -->

	<!-- 지원일자(revision_date) resume_info테이블의 applied_date가 설정한 시작일fr_date부터 
		종료일to_date까지의 기간 내 포함되는 이력서 노출 지원마감일(revision_date)이 설정한 시작일fr_date부터 종료일to_date까지의 
		기간 내 포함되는 이력서 노출 <if test="startDate != null and startDate != ''"> AND TO_DATE(r.revision_date, 
		'YYYY-MM-DD') >= TO_DATE(#{startDate}, 'YYYY-MM-DD') </if> <if test="endDate 
		!= null and endDate != ''"> AND TO_DATE(r.revision_date, 'YYYY-MM-DD') &lt;= 
		TO_DATE(#{endDate}, 'YYYY-MM-DD') </if> -->

	<!-- 성별(user테이블의 gender. user테이블의 user_id = resume_info테이블의 user_id ) -->
	<!-- 전체를 선택한 경우 남녀 모두 <if test="gender != null and gender != ''"> AND u.gender 
		= #{gender} </if> -->

	<!-- 생년월일로 나이 계산 <if test="(startAge != null and endAge != null) or (startAge 
		!= null and endAge == null) or (startAge == null and endAge != null)"> AND 
		MONTHS_BETWEEN(CURRENT_DATE, TO_DATE(u.birth, 'YYYY-MM-DD')) / 12 BETWEEN 
		<choose> <when test="startAge != null and endAge != null"> #{startAge} AND 
		#{endAge} </when> <when test="startAge != null and endAge == null"> #{startAge} 
		AND MONTHS_BETWEEN(CURRENT_DATE, TO_DATE(u.birth, 'YYYY-MM-DD')) / 12 </when> 
		<when test="startAge == null and endAge != null"> MONTHS_BETWEEN(CURRENT_DATE, 
		TO_DATE(u.birth, 'YYYY-MM-DD')) / 12 AND #{endAge} </when> </choose> </if> 
		지원경로(resume_info테이블 support_path) <if test="findOutPath != null and findOutPath 
		!= ''"> AND r.support_path = #{findOutPath} </if> 경력조건 <if test="careerCondition 
		!= null and careerCondition != ''"> <choose> <when test="careerCondition 
		== '0'"> AND MONTHS_BETWEEN(TO_DATE(c.resignation_date_of_company, 'YYYY-MM-DD'), 
		TO_DATE(c.joined_date_of_company, 'YYYY-MM-DD')) &lt; 1 </when> <otherwise> 
		AND MONTHS_BETWEEN(TO_DATE(c.resignation_date_of_company, 'YYYY-MM-DD'), 
		TO_DATE(c.joined_date_of_company, 'YYYY-MM-DD')) >= 1 </otherwise> </choose> 
		</if> </select> -->



	<!-- 이력서 삭제 -->
	<delete id="deleteResume" parameterType="String">
		DELETE FROM resume_info
		WHERE resume_id = #{resumeId}
	</delete>


</mapper>